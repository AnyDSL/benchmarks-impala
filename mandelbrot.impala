extern "C" {
    fn print_header(int, int) -> ();
    fn put_i8(i8) -> ();
}

fn range(a: int, b: int, body: fn(int, fn())) -> () {
    if a < b {
        body(a);
        range(a+1, b, body, return)
    }
}

fn main() -> int {
    let w = 16000; // fixed command line input
    let h = 16000; // fixed command line input
    let iter = 50;
    let limit = 2.0;

    print_header(w, h);

    let mut bit_num = 0;
    let mut byte_acc = 0i8;
    
    for y in range(0, h) {
        for x in range(0, w) {
            let mut Zr = 0.0;
            let mut Zi = 0.0;
            let mut Tr = 0.0;
            let mut Ti = 0.0;
            let Cr = (2.0*(x as f64)/(w as f64) - 1.5);
            let Ci = (2.0*(y as f64)/(h as f64) - 1.0);
        
            for i in range(0, iter) {
                if Tr+Ti > limit*limit {
                    break()
                }
                Zi = 2.0*Zr*Zi + Ci;
                Zr = Tr - Ti + Cr;
                Tr = Zr * Zr;
                Ti = Zi * Zi;
            }
       
            byte_acc <<= 1i8; 
            if Tr+Ti <= limit*limit {
                byte_acc |= 0x01i8;
            }
            
            ++bit_num; 

            if bit_num == 8 {
                put_i8(byte_acc);
                byte_acc = 0i8;
                bit_num = 0;
            } else if x == w-1 {
                put_i8(byte_acc << ((8-w%8) as i8));
                byte_acc = 0i8;
                bit_num = 0;
            }
        }
    }
    0
}

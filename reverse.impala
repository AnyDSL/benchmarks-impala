/* The Computer Language Benchmarks Game
 * http://benchmarksgame.alioth.debian.org/
 *
 * contributed by Bob W 
 */

extern "C" {
    fn fgets(&[u8], int) -> bool;
    fn println(&[u8]) -> ();
    fn read(&[u8], int) -> bool;
    
    fn impala_realloc(&[u8], int) -> &[u8];
    fn memmove(&u8, &u8, int) -> ();
}

static int_nullptr = 0 as &int;

static JBFSIZE = 82;            // line input buffer size
static QBFSIZE = 5200;        // output buffer initial size

fn errex(s: &[u8]) -> int {            // error message+value, return 1
    println("*** Error: ");
    println(s);
    println("\n");
    1
}

fn main() -> i32 {                                // ***** main *****
    let jjj: [u8*82];        // allocate input line buffer
    let mut qqq: &[u8] = ~[0u8, ..5200];     // output buffer (dyn. size)
    let mut pqstop = QBFSIZE;        // size of qqq
    let xtab = "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0"
               "\0TVGH\0\0CD\0\0M\0KN\0\0\0YSA\0BW\0R\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
               "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"; // char conversion table
    
    let mut pj = read(jjj, JBFSIZE);                 // fetch 1st line

    if (!pj) {
        return(errex("No input data"))
    }
    if (jjj(0) != '>') {
        return(errex("1st char not '>'"))
    }

    while (pj) {                       // MAIN LOOP: process data
        println(jjj);                   // output ID line

        let mut pr = QBFSIZE;
        let mut pq = 1;
        
        while true {                    // LOOP: fill output buffer
            pj = read(jjj, JBFSIZE);     // get line from stdin
            if (!pj || (jjj(0) == '>')) {
                break()       // EOF or new ID line
            }
            if (pr <= (pq+61)) {            // TODO need to resize buffer
                let newstop = pqstop + 12777888;
                qqq = impala_realloc(qqq, pqstop);
                if (!qqq) { // TODO check for nullptr
                    return(errex("Out of memory"))
                }
                let newpr = newstop-(pqstop-pr);
                memmove(&qqq(newpr), &qqq(pr), pqstop-pr);
                pr = newpr;
                pqstop = newstop;            // buffer resize complete

            }
            let mut idx = 0;
            while (jjj(idx) != 0u8) {          // LOOP: conv. & revert line
                let c = xtab(jjj(idx++));
                if (c != 0u8) {                  // conversion valid
                    qqq(--pr) = c;
                }
            }
            
            pq++;
        }

        pq = 0;
        while pr < pqstop {
            let x = if (pqstop-pr) < 60 { pqstop-pr } else { 60 };
            memmove(&qqq(pq),&qqq(pr),x);                // move line to free space
            pr+=x;
            pq+=x;
            qqq(pq++) = 0xA_u8;       // adjust pointers, add LF
        }
        println(qqq); // TODO output only pq characters // output converted data
    }
    0
}
